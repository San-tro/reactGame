"use strict";
import red from './red.png';
import green from './green.png';
import white from './white.png';
import grey from './grey.png';
import './App.css';


const {useState} = require("react");
const  useInterval = require("./useInterval");
const axios = require('axios');

/*function testbd(){// переделать под игрульку

axios.get('http://localhost:3001/landscape')// пример получения
    .then(function (response) {
      // handle success
      console.log(response);
    })
    .catch(function (error) {
      // handle error
      console.log(error);
    })
    axios.post(`http://localhost:3001/leaderbord/add`,{// пример добавления
        Name: '',
        Time: '',
        Score: '',
        }
    );
}*/

const FIELD_SIZE = 19;
const FIELD_ROW = [...new Array(FIELD_SIZE).keys()];





async function getMap(){
  try {
    const response = await axios.get('http://localhost:3001/landscape');
    return  response
  } catch (error) {
    console.log(error);
  }

}

var maps = getMap();
//getMap();

const textureMap1x = [0,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,0,1,2,3,4,5,0,1,2,3,4,0,1,2,3,0,1,2,0,1,0, 10,11,12,13,14,15,16,17,18,11,12,13,14,15,16,17,18,12,13,14,15,16,17,18,13,14,15,16,17,18,14,15,16,17,18,15,16,17,18,16,17,18,17,18,18, 0,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,0,1,2,3,4,5,0,1,2,3,4,0,1,2,3,0,1,2,0,1,0, 10,11,12,13,14,15,16,17,18,11,12,13,14,15,16,17,18,12,13,14,15,16,17,18,13,14,15,16,17,18,14,15,16,17,18,15,16,17,18,16,17,18,17,18,18];
const textureMap1y = [0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,5,5,5,5,6,6,6,7,7,8,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,5,5,5,5,6,6,6,7,7,8, 18,18,18,18,18,18,18,18,18,17,17,17,17,17,17,17,17,16,16,16,16,16,16,16,15,15,15,15,15,15,14,14,14,14,14,13,13,13,13,12,12,12,11,11,10, 18,18,18,18,18,18,18,18,18,17,17,17,17,17,17,17,17,16,16,16,16,16,16,16,15,15,15,15,15,15,14,14,14,14,14,13,13,13,13,12,12,12,11,11,10];

const  textureMap2x = [4,8,10,11,12,14,14,2,4,6,7,8,10,14,16,2,4,12,14,16,2,3,4,5,6,7,8,9,10,11,12,14,16,2,4,5,12,14,16,2,7,9,11,12,14,16,2,3,4,5,9,16,5,7,8,9,10,12,13,14,16,1,3,5,6,7,10,11,12,16,1,3,5,6,7,10,11,14,15,16, 7, 8, 10,11,13,14,16, 1, 2, 3, 4, 5, 10,11,13,14,16, 6, 7, 8,14,16, 1, 2, 3, 9, 10,11,12,13,14,16, 5, 7, 9, 10, 3, 4, 5, 6, 7, 10,11,12,13,14,16,17, 7,16,17,0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18, 0,18, 0,18, 0,18, 0,18, 0,18, 0,18, 0,18, 0,18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18];
const  textureMap2y = [1,1,1, 1, 1, 1, 1,2,2,2,2,2,2, 2, 2,3,3, 3, 3, 3,4,4,4,4,4,4,4,4,4, 4, 4, 4, 4,5,5,5, 5, 5, 5,6,6,6, 6, 6, 6, 6,7,7,7,7,7, 7,8,8,8,8,8, 8, 8, 8, 8,9,9,9,9,9,9, 9, 9, 9,10,10,10,10,10,10, 10, 10, 10, 10,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17, 17,0,0,0,0,0,0,0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,1, 1,2, 2,3, 3,4, 4,5, 5,6, 6,7, 7,8, 8,9, 9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18];

const  textureMap3x = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0, 0,18, 0,18, 0,18, 0,18, 0,18, 0,18, 0,18, 0,18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,1,2,3,10,15,16,1,5,6,7,8,9,10,12,13,15,1,3,13,15,16,1,3,4,6,7,8,9,11,13,1,4,5,6,9,10,11,13,15,16,1,4,12,13,16,1,3,4,6,7,8,9,10,12,13,15,16,1,7,10,13,14,1,3,4,5,6,7,10,11,14,16, 1, 3, 7, 9,10,11,13, 1, 5, 6, 7,11,13,15,16,17, 1, 2, 3, 4, 5, 9,13,16, 1, 7, 8, 9,11,12,13,14, 3, 4, 5, 7, 8, 9,11,14,16,17, 2, 3, 9,11,12,17, 5, 7,11,14,16,17, 2, 3, 7, 8, 9,10,11,12,14,15,16,17];
const  textureMap3y = [0,0,0,0,0,0,0,0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,1, 1,2, 2,3, 3,4, 4,5, 5,6, 6,7, 7,8, 8,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,1,1,1, 1, 1, 1,2,2,2,2,2,2, 2, 2, 2, 2,3,3, 3, 3, 3,4,4,4,4,4,4,4, 4, 4,5,5,5,5,5, 5, 5, 5, 5, 5,6,6, 6, 6, 6,7,7,7,7,7,7,7, 7, 7, 7, 7, 7,8,8, 8, 8, 8,9,9,9,9,9,9, 9, 9, 9, 9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17];

const  textureMap4x = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18, 0,18, 0,18, 0,18, 0,18, 0,18, 0,18, 0,18, 0,18, 0, 1, 2, 3, 4, 5, 6, 7, 8,10,11,12,13,14,15,16,17,18,1,2,3,4,5,6,7,8,9,10,11,15,16,1,11,12,13,16,4,7,9,11,13,15,16,2,4,5,7,9,10,11,13,2,4,6,7,15,16,17,2,6,8,9,10,11,12,14,15,17,2,3,5,6,9,12,14,3,6,8,9,12,14,16,17,1,3,6,9,11,12,14, 1, 3, 4, 6, 8, 9,11,14,17, 1, 2, 3, 6,11,17, 1, 5, 6, 7, 8, 9,11,13,14,17, 1, 2, 5, 9,15,16,17, 1, 2, 3, 5, 7, 9,10,11,13,14, 1, 5, 7, 9,12,13,16, 1, 3, 5, 7, 9,11,12,15,16, 1, 2, 3, 7,14,15];
const  textureMap4y = [0,0,0,0,0,0,0,0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,1, 1,2, 2,3, 3,4, 4,5, 5,6, 6,7, 7,8, 8,9, 9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,1,1,1,1,1,1,1,1,1, 1, 1, 1, 1,2, 2, 2, 2, 2,3,3,3, 3, 3, 3, 3,4,4,4,4,4, 4, 4, 4,5,5,5,5, 5, 5, 5,6,6,6,6, 6, 6, 6, 6, 6, 6,7,7,7,7,7, 7, 7,8,8,8,8, 8, 8, 8, 8,9,9,9,9, 9, 9, 9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17];

let randItem = {
  x: Math.floor(Math.random() * FIELD_SIZE),
  y: Math.floor(Math.random() * FIELD_SIZE)
}

const  DIRECTION = {
  39: {x: 1, y: 0},
  37: {x: -1, y: 0},
  38: {x: 0, y: -1},
  40: {x: 0, y: 1},
}

function getItem(x,y,personSegments, x1, y1) {
  if(randItem.x === x && randItem.y === y){
    return green
  }

  for(let i = 0; i< x1.length; i++){
    if(x1[i] === x && y1[i] === y){
      return white
    }
  }

  for (const  segment of personSegments){
    if (segment.x === x && segment.y === y){
      return red
    }
  }
}

function limitByField(j) {
  if(j >= FIELD_SIZE){
    return 0;
  }
  if(j < 0) {
    return FIELD_SIZE - 1;
  }
 return j;
}

function newPersonPosition(segments, direction,xMap,yMap) {
  let go = true;
  let x1 = segments[0].x + direction.x;
  let y1 = segments[0].y + direction.y;
  for(let i = 0; i< xMap.length; i++) {
    if (x1 == xMap[i] && y1 == yMap[i]) {
      go = false
    }
  }
  if(go){
    return segments.map(segment => ({
      x: limitByField(segment.x + direction.x),
      y: limitByField(segment.y + direction.y)
    }));
    }
  else {
    return segments.map(segment => ({
      x: limitByField(segment.x),
      y: limitByField(segment.y)
    }));
  }

}

function App() {


  const [personSegments,setPersonSegments] = useState([
    {x:9,y:9}
  ]);

  const movePerson = ({keyCode}) =>
      keyCode >= 37 && keyCode <= 40 && setPersonSegments(segments => newPersonPosition(segments, DIRECTION[keyCode], textureMap4x,textureMap4y));

  return (
<div role="button" tabIndex="0" onKeyDown={e => movePerson(e)} >
  <p >Adventure-lite</p>
    <div id="gor">
      <div id="vert">
        {FIELD_ROW.map(y =>(
            <div class="sqrow" key={y}>
              {FIELD_ROW.map(x => (
                  <img class="sq" key={x} src={getItem(x,y,personSegments, textureMap4x ,textureMap4y) || grey}/>
              ))}
            </div>
        ))}
      </div>
    </div>
</div>
  );
}

export default App;
